name: Build Citron for Windows

on:
  push:
    branches:
      - main

jobs:
  build-stable:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures all files are available

      - name: Set up Visual Studio 2022
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: '17.0'  # Visual Studio 2022

      - name: Install dependencies
        run: |
          # Install CMake
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y

          # Install Git
          choco install git -y

          # Install Vulkan SDK
          $VULKAN_VERSION = "1.3.290.0"  # Use the latest version as of April 2025
          $VULKAN_URL = "https://sdk.lunarg.com/sdk/download/${VULKAN_VERSION}/windows/VulkanSDK-${VULKAN_VERSION}-Installer.exe"
          Invoke-WebRequest -Uri $VULKAN_URL -OutFile "VulkanSDK-Installer.exe"
          .\VulkanSDK-Installer.exe /S
          del .\VulkanSDK-Installer.exe

      - name: Clone Citron Stable
        run: |
          Write-Output "Cloning stable version from https://git.citron-emu.org/Cversion from https://git.citron-emu.org/Citron/Citron"
          git clone --recursive https://git.citron-emu.org/Citron/Citron.git citron
          cd citron
          Write-Output "Checked out commit 51800e249bc44bd13b528220a8e064c3744c05d1"
          git checkout 51800e249bc44bd13b528220a8e064c3744c05d1
          $VERSION = "0.6.1"
          echo "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

      - name: Configure CMake
        run: |
          cd citron
          mkdir build
          cd build
          cmake .. -G "Visual Studio 17 2022" -A x64 `
            -DCITRON_USE_BUNDLED_VCPKG=ON `
            -DCITRON_TESTS=OFF `
            -DCITRON_CHECK_SUBMODULES=OFF `
            -DCITRON_USE_LLVM_DEMANGLE=OFF `
            -DCITRON_ENABLE_LTO=ON `
            -DCITRON_USE_QT_MULTIMEDIA=OFF `
            -DCITRON_USE_QT_WEB_ENGINE=OFF `
            -DENABLE_QT_TRANSLATION=ON `
            -DUSE_DISCORD_PRESENCE=OFF `
            -DBUNDLE_SPEEX=ON `
            -DCMAKE_BUILD_TYPE=Release

      - name: Build Citron
        run: |
          cd citron/build
          cmake --build . --config Release

      - name: Package Citron
        run: |
          cd citron/build
          mkdir Citron-$env:VERSION-windows
          Copy-Item -Path "bin/Release/citron.exe" -Destination "Citron-$env:VERSION-windows/"
          # Copy required DLLs (example based on wiki instructions)
          Copy-Item -Path "externals/ffmpeg-*/bin/*.dll" -Destination "Citron-$env:VERSION-windows/" -ErrorAction SilentlyContinue
          # Package into zip
          Compress-Archive -Path "Citron-$env:VERSION-windows" -DestinationPath "Citron-$env:VERSION-windows.zip"

      - name: Debug Token and Permissions
        env:
          CITRON_RELEASE_TOKEN: ${{ secrets.CITRON_RELEASE_TOKEN }}
        run: |
          if (-not $env:CITRON_RELEASE_TOKEN) {
            Write-Output "Error: CITRON_RELEASE_TOKEN is not set."
            exit 1
          } else {
            Write-Output "CITRON_RELEASE_TOKEN is set (length: $($env:CITRON_RELEASE_TOKEN.Length) characters)."
          }
          # Test token
          $USER_RESPONSE = Invoke-RestMethod -Uri "https://api.github.com/user" -Headers @{ Authorization = "token $env:CITRON_RELEASE_TOKEN" }
          Write-Output "User response: $USER_RESPONSE"
          # Check repo access
          $REPO_RESPONSE = Invoke-RestMethod -Uri "https://api.github.com/repos/zqpvr/citron-builds" -Headers @{ Authorization = "token $env:CITRON_RELEASE_TOKEN" }
          Write-Output "Repo response: $REPO_RESPONSE"

      - name: Create or Update Stable Release
        env:
          CITRON_RELEASE_TOKEN: ${{ secrets.CITRON_RELEASE_TOKEN }}
        run: |
          $RELEASE_TAG = "v0.6.1"
          # Check if release exists
          $RELEASE_RESPONSE = Invoke-RestMethod -Uri "https://api.github.com/repos/zqpvr/citron-builds/releases/tags/$RELEASE_TAG" -Headers @{ Authorization = "token $env:CITRON_RELEASE_TOKEN" } -ErrorAction SilentlyContinue
          if ($RELEASE_RESPONSE.id) {
            Write-Output "Stable release $RELEASE_TAG exists, deleting old assets..."
            $ASSETS = Invoke-RestMethod -Uri "https://api.github.com/repos/zqpvr/citron-builds/releases/$($RELEASE_RESPONSE.id)/assets" -Headers @{ Authorization = "token $env:CITRON_RELEASE_TOKEN" }
            foreach ($ASSET in $ASSETS) {
              Write-Output "Deleting asset ID $($ASSET.id)..."
              Invoke-RestMethod -Method Delete -Uri "https://api.github.com/repos/zqpvr/citron-builds/releases/assets/$($ASSET.id)" -Headers @{ Authorization = "token $env:CITRON_RELEASE_TOKEN" }
            }
            Write-Output "Updating existing release..."
            $BODY = @{ name = "Stable Build (Version: $env:VERSION)"; prerelease = $false } | ConvertTo-Json
            Invoke-RestMethod -Method Patch -Uri "https://api.github.com/repos/zqpvr/citron-builds/releases/$($RELEASE_RESPONSE.id)" -Headers @{ Authorization = "token $env:CITRON_RELEASE_TOKEN"; "Content-Type" = "application/json" } -Body $BODY
          } else {
            Write-Output "Creating new stable release $RELEASE_TAG..."
            $BODY = @{ tag_name = "$RELEASE_TAG"; name = "Stable Build (Version: $env:VERSION)"; prerelease = $false } | ConvertTo-Json
            $RELEASE_RESPONSE = Invoke-RestMethod -Method Post -Uri "https://api.github.com/repos/zqpvr/citron-builds/releases" -Headers @{ Authorization = "token $env:CITRON_RELEASE_TOKEN"; "Content-Type" = "application/json" } -Body $BODY
          }
          # Upload assets
          $ASSET_PATH = "citron/build/Citron-$env:VERSION-windows.zip"
          Write-Output "Uploading $ASSET_PATH..."
          $UPLOAD_URL = $RELEASE_RESPONSE.upload_url -replace "{.*}", "?name=$(Split-Path $ASSET_PATH -Leaf)"
          Invoke-RestMethod -Method Post -Uri $UPLOAD_URL -Headers @{ Authorization = "token $env:CITRON_RELEASE_TOKEN"; "Content-Type" = "application/octet-stream" } -InFile $ASSET_PATH

  build-nightly:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures all files are available

      - name: Set up Visual Studio 2022
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: '17.0'  # Visual Studio 2022

      - name: Install dependencies
        run: |
          # Install CMake
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y

          # Install Git
          choco install git -y

          # Install Vulkan SDK
          $VULKAN_VERSION = "1.3.290.0"  # Use the latest version as of April 2025
          $VULKAN_URL = "https://sdk.lunarg.com/sdk/download/${VULKAN_VERSION}/windows/VulkanSDK-${VULKAN_VERSION}-Installer.exe"
          Invoke-WebRequest -Uri $VULKAN_URL -OutFile "VulkanSDK-Installer.exe"
          .\VulkanSDK-Installer.exe /S
          del .\VulkanSDK-Installer.exe

      - name: Clone Citron Nightly
        run: |
          Write-Output "Cloning nightly version from https://git.citron-emu.org/Citron/Citron"
          git clone --recursive https://git.citron-emu.org/Citron/Citron.git citron
          cd citron
          $VERSION = $(git rev-parse --short=10 HEAD)
          $FULL_COMMIT = $(git rev-parse HEAD)
          echo "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "FULL_COMMIT=$FULL_COMMIT" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

      - name: Configure CMake
        run: |
          cd citron
          mkdir build
          cd build
          cmake .. -G "Visual Studio 17 2022" -A x64 `
            -DCITRON_USE_BUNDLED_VCPKG=ON `
            -DCITRON_TESTS=OFF `
            -DCITRON_CHECK_SUBMODULES=OFF `
            -DCITRON_USE_LLVM_DEMANGLE=OFF `
            -DCITRON_ENABLE_LTO=ON `
            -DCITRON_USE_QT_MULTIMEDIA=OFF `
            -DCITRON_USE_QT_WEB_ENGINE=OFF `
            -DENABLE_QT_TRANSLATION=ON `
            -DUSE_DISCORD_PRESENCE=OFF `
            -DBUNDLE_SPEEX=ON `
            -DCMAKE_BUILD_TYPE=Release

      - name: Build Citron
        run: |
          cd citron/build
          cmake --build . --config Release

      - name: Package Citron
        run: |
          cd citron/build
          mkdir Citron-$env:VERSION-windows
          Copy-Item -Path "bin/Release/citron.exe" -Destination "Citron-$env:VERSION-windows/"
          # Copy required DLLs (example based on wiki instructions)
          Copy-Item -Path "externals/ffmpeg-*/bin/*.dll" -Destination "Citron-$env:VERSION-windows/" -ErrorAction SilentlyContinue
          # Package into zip
          Compress-Archive -Path "Citron-$env:VERSION-windows" -DestinationPath "Citron-$env:VERSION-windows.zip"

      - name: Debug Token and Permissions
        env:
          CITRON_RELEASE_TOKEN: ${{ secrets.CITRON_RELEASE_TOKEN }}
        run: |
          if (-not $env:CITRON_RELEASE_TOKEN) {
            Write-Output "Error: CITRON_RELEASE_TOKEN is not set."
            exit 1
          } else {
            Write-Output "CITRON_RELEASE_TOKEN is set (length: $($env:CITRON_RELEASE_TOKEN.Length) characters)."
          }
          # Test token
          $USER_RESPONSE = Invoke-RestMethod -Uri "https://api.github.com/user" -Headers @{ Authorization = "token $env:CITRON_RELEASE_TOKEN" }
          Write-Output "User response: $USER_RESPONSE"
          # Check repo access
          $REPO_RESPONSE = Invoke-RestMethod -Uri "https://api.github.com/repos/zqpvr/citron-builds" -Headers @{ Authorization = "token $env:CITRON_RELEASE_TOKEN" }
          Write-Output "Repo response: $REPO_RESPONSE"

      - name: Create or Update Nightly Release
        env:
          CITRON_RELEASE_TOKEN: ${{ secrets.CITRON_RELEASE_TOKEN }}
        run: |
          $RELEASE_TAG = "nightly"
          # Check if release exists
          $RELEASE_RESPONSE = Invoke-RestMethod -Uri "https://api.github.com/repos/zqpvr/citron-builds/releases/tags/$RELEASE_TAG" -Headers @{ Authorization = "token $env:CITRON_RELEASE_TOKEN" } -ErrorAction SilentlyContinue
          if ($RELEASE_RESPONSE.id) {
            Write-Output "Nightly release exists, deleting old assets..."
            $ASSETS = Invoke-RestMethod -Uri "https://api.github.com/repos/zqpvr/citron-builds/releases/$($RELEASE_RESPONSE.id)/assets" -Headers @{ Authorization = "token $env:CITRON_RELEASE_TOKEN" }
            foreach ($ASSET in $ASSETS) {
              Write-Output "Deleting asset ID $($ASSET.id)..."
              Invoke-RestMethod -Method Delete -Uri "https://api.github.com/repos/zqpvr/citron-builds/releases/assets/$($ASSET.id)" -Headers @{ Authorization = "token $env:CITRON_RELEASE_TOKEN" }
            }
            Write-Output "Updating existing release..."
            $BODY = @{ name = "Continuous Build (Nightly Version: $env:VERSION)"; body = "Commit: $env:FULL_COMMIT"; prerelease = $true } | ConvertTo-Json
            Invoke-RestMethod -Method Patch -Uri "https://api.github.com/repos/zqpvr/citron-builds/releases/$($RELEASE_RESPONSE.id)" -Headers @{ Authorization = "token $env:CITRON_RELEASE_TOKEN"; "Content-Type" = "application/json" } -Body $BODY
          } else {
            Write-Output "Creating new nightly release..."
            $BODY = @{ tag_name = "$RELEASE_TAG"; name = "Continuous Build (Nightly Version: $env:VERSION)"; body = "Commit: $env:FULL_COMMIT"; prerelease = $true } | ConvertTo-Json
            $RELEASE_RESPONSE = Invoke-RestMethod -Method Post -Uri "https://api.github.com/repos/zqpvr/citron-builds/releases" -Headers @{ Authorization = "token $env:CITRON_RELEASE_TOKEN"; "Content-Type" = "application/json" } -Body $BODY
          }
          # Upload assets
          $ASSET_PATH = "citron/build/Citron-$env:VERSION-windows.zip"
          Write-Output "Uploading $ASSET_PATH..."
          $UPLOAD_URL = $RELEASE_RESPONSE.upload_url -replace "{.*}", "?name=$(Split-Path $ASSET_PATH -Leaf)"
          Invoke-RestMethod -Method Post -Uri $UPLOAD_URL -Headers @{ Authorization = "token $env:CITRON_RELEASE_TOKEN"; "Content-Type" = "application/octet-stream" } -InFile $ASSET_PATH
